# .github/workflows/manual-import-v3.yml
#
# -- CHANGELOG --
# v3: added changelog 
# v3: added gui in/out string
# v3: added script description


name: Manual Import v3

on:
  workflow_dispatch:
  
  # workflow gui menu:
    inputs:
      data_pattern:
        description: userTSV/CSV (uses last modified)
        default: TSV_HERE/*.tsv
        required: true
      project_owner:
        description: Project owner (@me, <org-name>, or repo owner (default))
        default: ${{ github.repository_owner }}
        required: true
      project_title:
        description: GH Project name (new or old; case-sensitive)
        default: ProjectName
        required: true
  
    # scripts startG :  
      run_labels:
        description: Run aa-labels.sh; (in:userTSV; out:(none))
        type: boolean
        default: true
        # The script `aa-labels.sh` consumes the `userTSV` file by reading all columns with "label" in the header to compile a unique list of all label names that need to exist in the repository.
      run_issues:
        description: Run ab-issues.sh; (in:userTSV; out:issue_map.tsv)
        type: boolean
        default: true
        # The script `ab-issues.sh` consumes the `userTSV` file row by row to create a new GitHub issue from the "title", "body", and "label" columns.
      run_subissues:
        description: Run ac-subissues.sh; (in:userTSV, issue_map.tsv; out:subissue_map.tsv)
        type: boolean
        default: true
        # The script `ac-subissues.sh` consumes the `userTSV` to create sub-issue titles and `issue_map.tsv` to link them to the correct parent issue.
      run_link_subissues:
        description: Run ba-link-subissues.sh; (in:(none); out:(none))
        type: boolean
        default: true        
        # The script `ba-link-subissues.sh` consumes no local files; it scans repository issues via API to link task-list items to parent issues.
      run_project:
        description: Run ad-project.sh; (in:issue_map.tsv, subissue_map.tsv; out:project_number.txt)
        type: boolean
        default: true
        # The script `ad-project.sh` consumes both `issue_map.tsv` and `subissue_map.tsv` to add all created issues as items to the project.
      run_fields:
        description: Run ae-fields.sh; (in:userTSV, issue_map.tsv, project_number.txt; out:(none))
        type: boolean
        default: true
        # The script `ae-fields.sh` consumes the `userTSV` for field values, `issue_map.tsv` to identify items, and `project_number.txt` to target the correct project.


permissions:
  contents: write
  issues: write
  repository-projects: write


# Global env & defaults for convenience
env:
  GH_REPO: ${{ github.repository }}
  GH_TOKEN: ${{ inputs.project_owner == '@me' && secrets.GH_PAT || secrets.GITHUB_TOKEN }}  # use PAT for @me projects
  PROJECT_OWNER: ${{ inputs.project_owner }}
  PROJECT_TITLE: ${{ inputs.project_title }}

defaults:
  run:
    shell: bash

jobs:
  import:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Tools & auth (no login needed; GH_TOKEN in env)
        run: |
          set -euo pipefail
          gh --version
          jq --version
          gh auth status -h github.com || true

      - name: Resolve data file from glob
        id: datafile
        run: |
          set -euo pipefail
          pattern='${{ inputs.data_pattern }}'
          shopt -s nullglob
          files=( $pattern )
          if [[ ${#files[@]} -eq 0 ]]; then
            echo "No files match: $pattern" >&2
            exit 1
          fi
          DATA_FILE="$(ls -1t ${pattern} | head -n1)"
          echo "DATA_FILE=$DATA_FILE" | tee -a "$GITHUB_ENV"
          echo "data_file=$DATA_FILE" >> "$GITHUB_OUTPUT"

      - name: Prepare scripts
        run: |
          set -euo pipefail
          chmod +x SCRIPTS/*.sh
          mkdir -p OUTPUTS

      - name: Labels
        if: ${{ inputs.run_labels }}
        run: |
          bash SCRIPTS/aa-labels.sh "${{ steps.datafile.outputs.data_file }}"

      - name: Issues
        if: ${{ inputs.run_issues }}
        run: |
          bash SCRIPTS/ab-issues.sh "${{ steps.datafile.outputs.data_file }}"

      - name: Sub-issues
        if: ${{ inputs.run_subissues }}
        env:
          PARENT_MAP: OUTPUTS/issue_map.tsv
        run: |
          bash SCRIPTS/ac-subissues.sh "${{ steps.datafile.outputs.data_file }}"

      - name: link subissues
        if: ${{ inputs.run_link_subissues }}
        run: bash SCRIPTS/ba-link-subissues.sh
        
      - name: Project (create/reuse + add items)
        if: ${{ inputs.run_project }}
        id: project
        env:
          PARENT_MAP: OUTPUTS/issue_map.tsv
          SUBMAP: OUTPUTS/subissue_map.tsv
        run: |
          set -euo pipefail
          bash SCRIPTS/ad-project.sh
          echo "PROJECT_NUMBER=$(cat OUTPUTS/project_number.txt)" | tee -a "$GITHUB_ENV"
          echo "project_number=$(cat OUTPUTS/project_number.txt)" >> "$GITHUB_OUTPUT"

      - name: Fields
        if: ${{ inputs.run_fields }}
        env:
          PROJECT_NUMBER: ${{ steps.project.outputs.project_number }}
          PARENT_MAP: OUTPUTS/issue_map.tsv
        run: |
          bash SCRIPTS/ae-fields.sh "${{ steps.datafile.outputs.data_file }}"

      - name: Commit outputs
        if: always()
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add OUTPUTS/*
          git commit -m "Save workflow outputs" || echo "No changes"
          git push

