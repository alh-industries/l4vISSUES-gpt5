name: Manual Import (TSV â†’ Labels, Issues, Sub-issues, Project, Fields)

on:
  workflow_dispatch:
    inputs:
      data_pattern:
        description: Glob for your TSV/CSV (e.g., TSV_HERE/*.tsv)
        default: TSV_HERE/*.tsv
        required: true
      project_owner:
        description: Project owner (@me or org name)
        default: "@me"
        required: true
      project_title:
        description: Project title (create or reuse)
        default: Imported Plan
        required: true
      run_labels:
        description: Run labels step
        type: boolean
        default: true
      run_issues:
        description: Run issues step
        type: boolean
        default: true
      run_subissues:
        description: Run sub-issues step
        type: boolean
        default: true
      run_project:
        description: Run project (create/reuse + add items)
        type: boolean
        default: true
      run_fields:
        description: Run project fields step
        type: boolean
        default: true

permissions:
  contents: read
  issues: write
  projects: write

jobs:
  import:
    runs-on: ubuntu-latest
    env:
      GH_REPO: ${{ github.repository }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PROJECT_OWNER: ${{ inputs.project_owner }}
      PROJECT_TITLE: ${{ inputs.project_title }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Tool versions & auth
        shell: bash
        run: |
          gh --version
          jq --version
          echo "$GH_TOKEN" | gh auth login --with-token

      - name: Resolve DATA_FILE from glob
        id: datafile
        shell: bash
        run: |
          set -euo pipefail
          pattern='${{ inputs.data_pattern }}'
          shopt -s nullglob
          files=( $pattern )
          if [[ ${#files[@]} -eq 0 ]]; then
            echo "No files match: $pattern" >&2
            exit 1
          fi
          # pick latest by mtime
          DATA_FILE="$(ls -1t ${pattern} | head -n1)"
          echo "DATA_FILE=$DATA_FILE" | tee -a "$GITHUB_ENV"
          echo "data_file=$DATA_FILE" >> "$GITHUB_OUTPUT"

      - name: Make scripts executable
        shell: bash
        run: |
          chmod +x SCRIPTS/*.sh
          mkdir -p OUTPUTS

      - name: Labels
        if: ${{ inputs.run_labels }}
        shell: bash
        run: |
          bash SCRIPTS/aa-labels.sh "${{ steps.datafile.outputs.data_file }}"
        env:
          GH_REPO: ${{ env.GH_REPO }}

      - name: Issues
        if: ${{ inputs.run_issues }}
        shell: bash
        run: |
          bash SCRIPTS/ab-issues.sh "${{ steps.datafile.outputs.data_file }}"
        env:
          GH_REPO: ${{ env.GH_REPO }}

      - name: Sub-issues
        if: ${{ inputs.run_subissues }}
        shell: bash
        run: |
          bash SCRIPTS/ac-subissues.sh "${{ steps.datafile.outputs.data_file }}"
        env:
          GH_REPO: ${{ env.GH_REPO }}
          PARENT_MAP: OUTPUTS/issue_map.tsv

      - name: Project (create or reuse + add items)
        if: ${{ inputs.run_project }}
        id: project
        shell: bash
        run: |
          bash SCRIPTS/ad-project.sh
          echo "PROJECT_NUMBER=$(cat OUTPUTS/project_number.txt)" | tee -a "$GITHUB_ENV"
          echo "project_number=$(cat OUTPUTS/project_number.txt)" >> "$GITHUB_OUTPUT"
        env:
          PROJECT_OWNER: ${{ env.PROJECT_OWNER }}
          PROJECT_TITLE: ${{ env.PROJECT_TITLE }}
          PARENT_MAP: OUTPUTS/issue_map.tsv
          SUBMAP: OUTPUTS/subissue_map.tsv

      - name: Fields
        if: ${{ inputs.run_fields }}
        shell: bash
        run: |
          bash SCRIPTS/ae-fields.sh "${{ steps.datafile.outputs.data_file }}"
        env:
          PROJECT_OWNER: ${{ env.PROJECT_OWNER }}
          PROJECT_NUMBER: ${{ steps.project.outputs.project_number }}
          PARENT_MAP: OUTPUTS/issue_map.tsv
